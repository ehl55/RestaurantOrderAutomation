/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csv_parser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
/**
 *
 * @author Eug
 */
public class MainWindow extends javax.swing.JFrame {
    
    CategorizerJFrame categorizerJFrame;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setLocationRelativeTo(null); //centers on screen
        
        categorizerJFrame = new CategorizerJFrame();
        categorizerJFrame.setVisible(false);
        categorizerJFrame.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        convertButton = new javax.swing.JButton();
        selectTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dan's Helper");

        convertButton.setText("Convert");
        convertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                convertButtonMouseClicked(evt);
            }
        });

        selectTextField.setEditable(false);
        selectTextField.setText("<Select Here>");
        selectTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectTextFieldMouseClicked(evt);
            }
        });

        jLabel1.setText("Input");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addGap(20, 20, 20)
                        .addComponent(selectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addComponent(convertButton)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectTextFieldMouseClicked
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            String filename = f.getAbsolutePath();

            if (filename.substring(filename.length()-3).equals("csv")) {
                selectTextField.setText(filename);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid file chosen, must be a .csv file", "Error" , JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception NullPointerException) {
            System.out.println("User did not choose a file");
        }
    }//GEN-LAST:event_selectTextFieldMouseClicked

    private void convertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertButtonMouseClicked
        String filename = selectTextField.getText();
        
        try {
            if (filename.substring(filename.length()-3).equals("csv")) {
                List<TimeTable> timeTables = parse(selectTextField.getText());
                ExcelSheetCreator.create(timeTables, selectTextField.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Invalid file chosen, must be a .csv file", "Error" , JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something unexpected happened.", "Failure" , JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace();
        }        
    }//GEN-LAST:event_convertButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    private List<TimeTable> parse (String fileName) {
        
        Categorizer category = new Categorizer();
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a");
        
        //TreeMap so that can retrieve older timeTable if necessary 
        //ex: person 1 orders pickup at 4PM, person 2 orders delivery at 4PM, then we need access to timetable 330PM (which may or may not exist)
        TreeMap<String, TimeTable> timeTables = new TreeMap<>(new Comparator<String>()
        {
            public int compare(String time1, String time2) {
                //convert to time object
                LocalTime t1 = LocalTime.parse(time1, formatter);
                LocalTime t2 = LocalTime.parse(time2, formatter);
                
                //compare
                return t1.compareTo(t2);
            }
        });
        
        try {
            BufferedReader br = new BufferedReader(new FileReader(fileName));
            String line = br.readLine(); //skip the 0th line (column name)
            
            Set<String> missingCategory = new HashSet<>(); //food names which have no category
            categorizerJFrame.injectMissingCategory(missingCategory);
            
            //each line is a person
            while (line != null) {
                line = br.readLine();
                if(line == null) break;
                
                String[] row = splitByCommaIgnoreCommaInQuote(line);       
                Person p = new Person(row[3] + " " + row[4]); //person's name
                parseFood(row[11], p.totals, category, missingCategory, p); //get orders, update totals at PERSON level
                
                LocalTime personTime = LocalTime.parse(row[1], formatter);
                //new feature 1/17/21: if it's DELIVERY, subtract 30 min
                //col 9 is "experience" col
                String experience = row[9];
                experience = experience.toUpperCase(); //in case it's "Delivery", "delivery", etc.
                if (experience.contains("DELIVERY")) personTime = personTime.minusMinutes(30);
                
                String personTimeString = personTime.format(formatter);
                //System.out.println(personTimeString);
                if(!timeTables.containsKey(personTimeString)) {
                    timeTables.put(personTimeString, new TimeTable(personTime));
                }
                
                //add person to current timeblock
                timeTables.get(personTimeString).people.add(p);                
            }
            
            //check for any items without categorization, tell user to categorize
            if (missingCategory.size() > 0) {
                
                JOptionPane.showMessageDialog(null, "Couldn't complete conversion because of uncategorized items. Please categorize items.", "Error", JOptionPane.INFORMATION_MESSAGE);
                
                categorizerJFrame.setVisible(true);
                
                categorizerJFrame.updateMissingCategoriesTextArea();
            } else {
                JOptionPane.showMessageDialog(null, "Sucessful conversion.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        List<TimeTable> res = new ArrayList<>();
        for(TimeTable tt : timeTables.values()) {
            res.add(tt);
        }
        
        return res;
}
    
    //parses a single "Supplements" column, AND updates passed in totals table
    //ex: "1 x Market Pie (26.00),1 x Cheesy Garlic Monkey Bread (Not Pizza) (10.00)"
    private static void parseFood (String col, Totals totals, Categorizer category, Set<String> missingCategory, Person p) {
        String[] quantityAndFoodArr = col.split(",");
        
        String prevFood = "";
        
        for(String qAndF : quantityAndFoodArr) {
            qAndF = qAndF.trim(); //remove surrounding white spaces
            
            if (qAndF.length()==0) continue; //cancelled order
            
            String[] qAndFSplit = qAndF.split(" x "); //May cause error for weird food name with 'x' in it
            int quantity = Integer.parseInt(qAndFSplit[0]);
            
            String foodWithPrice = qAndFSplit[1];
            String foodWithoutPrice = foodWithPrice.substring(0,foodWithPrice.indexOf("(")).trim(); //ignore everything in parenthesis
            
            HashMap<String, String> catTable = category.catTable;
            
            //if it's a side, want to append to previous food item
            //CAREFUL: This can be buggy if a person orders JUST a side, idk if that can happen though.
            //NOTE: "Side" has been changed into "Add on"
            if(catTable.containsKey(foodWithoutPrice) && catTable.get(foodWithoutPrice).equals("Add on")) {    
                
                String side = foodWithoutPrice;
                String prevFoodWithSide = prevFood + " - " + side; 

                totals.updateOldOrderWithSide(prevFood, prevFoodWithSide, category);
                
                prevFood = prevFoodWithSide; //should handle multiple sides; however, assumes sides are immediate right element in csv.      
            } else {
                prevFood = foodWithoutPrice;
                totals.order(foodWithoutPrice, quantity, category, missingCategory);
            }
        }
        
    }
    
    //Also removes surrounding quotation marks
    private static String[] splitByCommaIgnoreCommaInQuote (String line) {
        
        List<String> result = new ArrayList<String>();
        int start = 0;
        boolean inQuotes = false;
        for (int current = 0; current < line.length(); current++) {
            if (line.charAt(current) == '\"') inQuotes = !inQuotes; // toggle state
            else if (line.charAt(current) == ',' && !inQuotes) {
                
                //NOTE: REALLY FUCKING ANNOYING THING HAPPENS when you save original csv in Excel. Excel 
                //automatically deletes all the "", except for the Supplements column, which throws off this
                //logic because this assumes everything surrounded by "" (for some reason, in downloaded csv everything surrounded by quotes)
                
                //if want to edit for testing, edit in notepad!!!
                result.add(line.substring(start+1, current-1)); //+1/-1 to avoid adding extra "
                
                start = current + 1;
            }
        }
        result.add(line.substring(start+1));
        return result.toArray(new String[0]);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField selectTextField;
    // End of variables declaration//GEN-END:variables
}
